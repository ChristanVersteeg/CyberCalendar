name: Daily Tip Update

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  update-tip:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Get current tip
        id: tip
        env:
          TIPS_JSON: ${{ secrets.TIPS_JSON }}
        run: |
          DAY=$(date +%j | sed 's/^0*//')
          TIP=$(echo "$TIPS_JSON" | jq -r ".tips[$((DAY-1))].text")
          echo "tip=$TIP" >> $GITHUB_OUTPUT

      - name: Get current image (PNG only, with auth logging)
        id: image
        env:
          TIPS_JSON: ${{ secrets.TIPS_JSON }}
          GITHUB_TOKEN: ${{ secrets.PAT }}
        run: |
          set -euo pipefail
          set -x
      
          # 1) Which day-of-year are we on?
          DAY=$(date +%j | sed 's/^0*//')
          echo "üî¢ DAY: $DAY"
      
          # 2) Pull the bare image name from your JSON
          IMAGE_BASE=$(jq -r ".tips[$((DAY-1))].image" <<< "$TIPS_JSON")
          echo "üñº Raw name: '$IMAGE_BASE'"
      
          # 3) Bail out early if no image specified
          if [[ -z "$IMAGE_BASE" || "$IMAGE_BASE" == "null" ]]; then
            echo "‚ö†Ô∏è  No image for today"
            echo "image=" >> $GITHUB_OUTPUT
            exit 0
          fi
      
          # 4) Build URL for PNG
          IMG="${IMAGE_BASE}.png"
          URL="https://api.github.com/repos/ChristanVersteeg/CyberTips/contents/images/${IMG}"
          echo "üåê Attempting to download $IMG from:"
          echo "   $URL"
      
          # 5) Fetch with headers dump so we can inspect auth scopes
          STATUS=$(curl -sSL \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3.raw" \
            -D headers.txt \
            -w "%{http_code}" \
            -o "$IMG" \
            "$URL" || true)
      
          echo "üì¨ HTTP status: $STATUS"
          echo "üìë Response headers (excerpt):"
          head -n 10 headers.txt | sed 's/^/   /'
      
          # 6) Check for auth errors
          if [[ "$STATUS" == "401" ]]; then
            echo "‚ùå Authentication failed (401 Unauthorized)."
            echo "   ‚Ä¢ Check that GITHUB_TOKEN/PAT is set correctly."
            echo "   ‚Ä¢ Verify it has at least repo:read permission on ChristanVersteeg/CyberTips."
            rm -f "$IMG"
            IMAGE=""
          elif [[ "$STATUS" == "403" ]]; then
            echo "‚ùå Access forbidden (403)."
            echo "   ‚Ä¢ The token may lack sufficient scopes or be rate‚Äëlimited."
            echo "   ‚Ä¢ Inspect 'X-OAuth-Scopes' in headers above."
            rm -f "$IMG"
            IMAGE=""
          elif [[ "$STATUS" == "200" && -s "$IMG" ]]; then
            echo "‚úÖ Successfully fetched $IMG ($(stat -c '%s' "$IMG") bytes)"
            IMAGE="$IMG"
          else
            echo "‚ö†Ô∏è  Failed to fetch $IMG (status $STATUS)."
            rm -f "$IMG"
            IMAGE=""
          fi
      
          # 7) Final workspace check
          echo "üìÇ Workspace contents:"
          ls -lha .
      
          # 8) Export the result
          echo "image=$IMAGE" >> $GITHUB_OUTPUT
      
        
        
        
        
        
      - name: Prepare gh-pages branch
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git checkout --orphan temp
          git rm -rf .

      - name: Create index.html (with client‚Äëside image logging)
        env:
          IMAGE: ${{ steps.image.outputs.image }}
        run: |
          set -euxo pipefail
      
          # start the HTML
          cat > index.html <<EOF
          <!DOCTYPE html>
          <html>
            <head>
              <meta charset="UTF-8">
              <title>Daily Tip</title>
            </head>
            <body>
              <h1>Today's Tip:</h1>
              <div id="tip"></div>
          EOF
      
          # conditionally inject the image tag with onload/onerror
          if [ -n "$IMAGE" ]; then
            echo "‚úÖ Adding <img> with logging for '$IMAGE'"
            cat >> index.html <<EOF
          <div id="tip-image">
            <img
              id="tip-img"
              src="$IMAGE"
              alt="Daily tip illustration"
              onload="console.log('‚úÖ Image loaded successfully: $IMAGE')"
              onerror="console.error('‚ùå Image failed to load: $IMAGE')"
            />
          </div>
          EOF
              else
                echo "‚ö†Ô∏è  No image set, skipping <img> block"
                cat >> index.html <<EOF
              <div id="tip-image"></div>
          EOF
              fi
      
          # your existing tip‚Äêtext fetcher‚Ä¶
          cat >> index.html <<EOF
          <script>
            // fetch the tip text
            fetch('tip.txt')
              .then(r => r.text())
              .then(t => document.getElementById('tip').textContent = t);
      
            // extra check: fetch the image and log status
            if ("$IMAGE") {
              fetch('$IMAGE')
                .then(r => console.log('üîç fetch("$IMAGE") status:', r.status))
                .catch(e => console.error('üö® fetch("$IMAGE") error:', e));
            }
          </script>
            </body>
          </html>
          EOF
        
            # dump the first 200 lines so you can confirm
            echo "üîç Generated index.html:"
            sed -n '1,200p' index.html
        
        
        
        
        

      - name: Add daily tip
        run: |
          echo "${{ steps.tip.outputs.tip }}" > tip.txt
          git add tip.txt index.html
          git commit -m "Daily tip update: $(date +%F)"

      - name: Force push to gh-pages
        run: |
          git branch -D gh-pages || true
          git branch -m gh-pages
          git push -f origin gh-pages